<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [nebula_master_401\nebula_master_401.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image nebula_master_401\nebula_master_401.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu Jan 11 13:23:22 2018
<BR><P>
<H3>Maximum Stack Usage =       1744 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
manager_wifi &rArr; wifi_status_loop &rArr; server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3f]">DMA1_Stream0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">DMA1_Stream0_IRQHandler</a><BR>
 <LI><a href="#[2e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">BusFault_Handler</a><BR>
 <LI><a href="#[2c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">HardFault_Handler</a><BR>
 <LI><a href="#[2d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">MemManage_Handler</a><BR>
 <LI><a href="#[2f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">UsageFault_Handler</a><BR>
 <LI><a href="#[8f]">input_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">input_thread</a><BR>
 <LI><a href="#[ec]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ec]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[46]">ADC_IRQHandler</a> from stm32f4xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[20]">CUSTOM_HID_DeInit_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[1f]">CUSTOM_HID_Init_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[21]">CUSTOM_HID_OutEvent_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[9]">Close_ble</a> from nrf51822.o(i.Close_ble) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[11]">Close_wifi</a> from ewm3080b.o(i.Close_wifi) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[3f]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[42]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[45]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[60]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[61]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[62]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[64]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[65]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[66]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[89]">Dsiplay_Thread</a> from display.o(i.Dsiplay_Thread) referenced from display.o(.constdata)
 <LI><a href="#[3a]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[57]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[47]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[50]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4f]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[52]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[51]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[a]">Ioctl_ble</a> from nrf51822.o(i.Ioctl_ble) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[12]">Ioctl_wifi</a> from ewm3080b.o(i.Ioctl_wifi) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[2d]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[74]">NULLFunction</a> from mmi.o(i.NULLFunction) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[63]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[59]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[8]">Open_ble</a> from nrf51822.o(i.Open_ble) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[10]">Open_wifi</a> from ewm3080b.o(i.Open_wifi) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[35]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[58]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[b]">Read_ble</a> from nrf51822.o(i.Read_ble) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[13]">Read_wifi</a> from ewm3080b.o(i.Read_wifi) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5b]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[53]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6b]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[36]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[48]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4b]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[49]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4c]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4d]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4e]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5c]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[55]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[67]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">USBD_CUSTOM_HID_DataIn</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[27]">USBD_CUSTOM_HID_DataOut</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[23]">USBD_CUSTOM_HID_DeInit</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[25]">USBD_CUSTOM_HID_EP0_RxReady</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[28]">USBD_CUSTOM_HID_GetCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetCfgDesc) referenced 6 times from usbd_customhid.o(.data)
 <LI><a href="#[29]">USBD_CUSTOM_HID_GetDeviceQualifierDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[22]">USBD_CUSTOM_HID_Init</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Init) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[24]">USBD_CUSTOM_HID_Setup</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Setup) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[1d]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[18]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1e]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[19]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1a]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1b]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1c]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2f]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[c]">Write_ble</a> from nrf51822.o(i.Write_ble) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[14]">Write_wifi</a> from ewm3080b.o(i.Write_wifi) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[6e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[73]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[85]">application_start</a> from application_main_thread.o(i.application_start) referenced from main.o(.constdata)
 <LI><a href="#[8d]">battery_check_thread</a> from battery.o(i.battery_check_thread) referenced from application_main_thread.o(.constdata)
 <LI><a href="#[94]">battry_period_timer</a> from battery.o(i.battry_period_timer) referenced from battery.o(.constdata)
 <LI><a href="#[e]">ble_clear_buff</a> from nrf51822.o(i.ble_clear_buff) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[f]">ble_direct_write</a> from nrf51822.o(i.ble_direct_write) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[81]">button10_short_press</a> from input_event.o(i.button10_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[78]">button1_short_press</a> from input_event.o(i.button1_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[79]">button2_short_press</a> from input_event.o(i.button2_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[7a]">button3_short_press</a> from input_event.o(i.button3_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[7b]">button4_short_press</a> from input_event.o(i.button4_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[7c]">button5_short_press</a> from input_event.o(i.button5_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[7d]">button6_short_press</a> from input_event.o(i.button6_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[7e]">button7_short_press</a> from input_event.o(i.button7_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[7f]">button8_short_press</a> from input_event.o(i.button8_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[80]">button9_short_press</a> from input_event.o(i.button9_short_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[76]">button_det_double_press</a> from input_event.o(i.button_det_double_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[77]">button_det_long_press</a> from input_event.o(i.button_det_long_press) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[75]">button_det_short_release</a> from input_event.o(i.button_det_short_release) referenced from mmi.o(i.mmi_init)
 <LI><a href="#[88]">delay_charge_full</a> from display.o(i.delay_charge_full) referenced from display.o(.constdata)
 <LI><a href="#[72]">fputc</a> from debug_log.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[8f]">input_thread</a> from input_event.o(i.input_thread) referenced from input_event.o(.constdata)
 <LI><a href="#[8e]">listen_ble_device_thread</a> from nrf51822.o(i.listen_ble_device_thread) referenced from application_main_thread.o(.constdata)
 <LI><a href="#[91]">log_thread</a> from debug_log.o(i.log_thread) referenced from debug_log.o(.constdata)
 <LI><a href="#[6c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d]">manager_ble</a> from nrf51822.o(i.manager_ble) referenced 2 times from nrf51822.o(.data)
 <LI><a href="#[15]">manager_wifi</a> from ewm3080b.o(i.manager_wifi) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[8a]">power_off_battery_Display_Thread</a> from display.o(i.power_off_battery_Display_Thread) referenced from display.o(.constdata)
 <LI><a href="#[96]">process_loop</a> from ewm3080b.o(i.process_loop) referenced from ewm3080b.o(.constdata)
 <LI><a href="#[83]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[82]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[84]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[95]">read_page_thread</a> from page_detect.o(i.read_page_thread) referenced from page_detect.o(.constdata)
 <LI><a href="#[93]">resend_timer_callback</a> from nrf51822.o(i.resend_timer_callback) referenced from nrf51822.o(.constdata)
 <LI><a href="#[86]">return_main_screem_timer</a> from display.o(i.return_main_screem_timer) referenced from display.o(.constdata)
 <LI><a href="#[90]">select_mode_thread</a> from input_event.o(i.select_mode_thread) referenced from input_event.o(.constdata)
 <LI><a href="#[8c]">status_machin_thread</a> from status_machin.o(i.status_machin_thread) referenced from application_main_thread.o(.constdata)
 <LI><a href="#[87]">stop_display_charge_full</a> from display.o(i.stop_display_charge_full) referenced from display.o(.constdata)
 <LI><a href="#[71]">stop_tcp_client</a> from ewm3080b.o(i.stop_tcp_client) referenced from ewm3080b.o(i.TCP_SERVER_CONNECTED_callback)
 <LI><a href="#[70]">tcp_recive</a> from ewm3080b.o(i.tcp_recive) referenced from ewm3080b.o(i.TCP_SERVER_CONNECTED_callback)
 <LI><a href="#[6f]">tcp_send</a> from ewm3080b.o(i.tcp_send) referenced from ewm3080b.o(i.TCP_SERVER_CONNECTED_callback)
 <LI><a href="#[6]">usb_clear_buff</a> from usb_controler.o(i.usb_clear_buff) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[1]">usb_close</a> from usb_controler.o(i.usb_close) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[92]">usb_controler_Task</a> from usb_controler.o(i.usb_controler_Task) referenced from usb_controler.o(.constdata)
 <LI><a href="#[2]">usb_ioctl</a> from usb_controler.o(i.usb_ioctl) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[8b]">usb_main_task</a> from usb_controler.o(i.usb_main_task) referenced from application_main_thread.o(.constdata)
 <LI><a href="#[5]">usb_manager</a> from usb_controler.o(i.usb_manager) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[0]">usb_open</a> from usb_controler.o(i.usb_open) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[3]">usb_read</a> from usb_controler.o(i.usb_read) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[4]">usb_write</a> from usb_controler.o(i.usb_write) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[7]">usb_write_dirct</a> from usb_controler.o(i.usb_write_dirct) referenced 2 times from usb_controler.o(.data)
 <LI><a href="#[16]">wifi_clear_buff</a> from ewm3080b.o(i.wifi_clear_buff) referenced 2 times from ewm3080b.o(.data)
 <LI><a href="#[17]">wifi_direct_write</a> from ewm3080b.o(i.wifi_direct_write) referenced 2 times from ewm3080b.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[290]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[97]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[291]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[292]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[293]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[294]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[295]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[30]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[288]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[287]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[32]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_store_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Packet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_usb_packet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_wifi
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WIFI_return_result
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_HID_OutEvent_FS
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_log
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_wifi
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_position_buffer
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_store_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Packet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_moudule_init
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aotu_update_icon_thread
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pen
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_wifi
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a8]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_display_charge_full
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_long_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[27b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[282]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[d3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_onlinenote_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_offlinenote_page
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_excute
</UL>

<P><STRONG><a name="[278]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_excute
</UL>

<P><STRONG><a name="[254]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
</UL>

<P><STRONG><a name="[27c]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[29a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[29b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[29c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>ADC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>BCD_to_int</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ext_rtc.o(i.BCD_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCD_to_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samll_to_big
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[a4]"></a>Ble_Response_callback</STRONG> (Thumb, 224 bytes, Stack size 176 bytes, nrf51822.o(i.Ble_Response_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Ble_Response_callback &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_event
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[2e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>ButtonProcessLoop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mmi.o(i.ButtonProcessLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ButtonProcessLoop &rArr; read_button &rArr; get_button_ad_value &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_button
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckButtonEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_thread
</UL>

<P><STRONG><a name="[af]"></a>CLR_GDDRAM</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, oled.o(i.CLR_GDDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLR_GDDRAM &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLEAR_BUFF
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_wait
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_low_power
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_low_power
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_charge_full
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
</UL>

<P><STRONG><a name="[9]"></a>Close_ble</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf51822.o(i.Close_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Close_ble &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qiut_test_ble_net
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Close_wifi</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ewm3080b.o(i.Close_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Close_wifi &rArr; wifi_AT_commond_excute &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_excute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>DRAW_1_Area</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.DRAW_1_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DRAW_1_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aotu_update_icon_thread
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_baterry
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pen
</UL>

<P><STRONG><a name="[bb]"></a>DRAW_2_Area</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.DRAW_2_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DRAW_2_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_wait
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_low_power
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_low_power
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_charge_full
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
</UL>

<P><STRONG><a name="[31]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>Dfu_Info_update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dfu.o(i.Dfu_Info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Dfu_Info_update &rArr; STMFLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[259]"></a>Disbale_note_store</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, note_manager.o(i.Disbale_note_store))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
</UL>

<P><STRONG><a name="[be]"></a>Dispalay_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(i.Dispalay_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Dispalay_deinit &rArr; OLED_Off_Init &rArr; SPI_Write_Command &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Off_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
</UL>

<P><STRONG><a name="[c0]"></a>Display_Pen</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, display.o(i.Display_Pen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Display_Pen &rArr; DRAW_1_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[c2]"></a>Display_Test</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, display.o(i.Display_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Display_Test &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
</UL>

<P><STRONG><a name="[c3]"></a>Display_chargefull</STRONG> (Thumb, 118 bytes, Stack size 168 bytes, display.o(i.Display_chargefull))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Display_chargefull &rArr; DRAW_2_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
</UL>

<P><STRONG><a name="[c7]"></a>Display_charging_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(i.Display_charging_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Display_charging_init &rArr; OLED_Display_On &rArr; SPI_Write_Command &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
</UL>

<P><STRONG><a name="[c8]"></a>Display_init</STRONG> (Thumb, 206 bytes, Stack size 192 bytes, display.o(i.Display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Display_init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLEAR_BUFF
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
</UL>

<P><STRONG><a name="[cd]"></a>Display_update_addr</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, display.o(i.Display_update_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Display_update_addr &rArr; OLED_ShowString &rArr; OLED_ShowChar
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_BMP
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[d0]"></a>Display_update_baterry</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, display.o(i.Display_update_baterry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Display_update_baterry &rArr; DRAW_1_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_charge_full
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[d2]"></a>Display_update_offlinenote_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, display.o(i.Display_update_offlinenote_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Display_update_offlinenote_page &rArr; OLED_ShowString &rArr; OLED_ShowChar
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_BMP
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
</UL>

<P><STRONG><a name="[d4]"></a>Display_update_onlinenote_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, display.o(i.Display_update_onlinenote_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Display_update_onlinenote_page &rArr; OLED_ShowString &rArr; OLED_ShowChar
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_BMP
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[d5]"></a>Display_update_storage_space</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, display.o(i.Display_update_storage_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Display_update_storage_space &rArr; OLED_DrawRectangle &rArr; OLED_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_BMP
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[d8]"></a>Display_waite_updata</STRONG> (Thumb, 152 bytes, Stack size 184 bytes, display.o(i.Display_waite_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Display_waite_updata &rArr; OLED_Refresh_bank &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_bank
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLEAR_BUFF
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
</UL>

<P><STRONG><a name="[89]"></a>Dsiplay_Thread</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, display.o(i.Dsiplay_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Dsiplay_Thread &rArr; screen_main &rArr; redraw_main_sceen &rArr; OLED_Refresh_bank &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_wait
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_low_power
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>EMR_pad_isr_callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, general_emr.o(i.EMR_pad_isr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = EMR_pad_isr_callback &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_read_iic_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[e1]"></a>EMR_pad_version</STRONG> (Thumb, 270 bytes, Stack size 176 bytes, general_emr.o(i.EMR_pad_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = EMR_pad_version &rArr; TOUCH_PAD_ON &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[e6]"></a>ERM_cmd_handle</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, general_emr.o(i.ERM_cmd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ERM_cmd_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_update_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
</UL>

<P><STRONG><a name="[3a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; EMR_pad_isr_callback &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; EMR_pad_isr_callback &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[ff]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[ed]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[b3]"></a>GetButtonStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mmi.o(i.GetButtonStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmi_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckButtonEvent
</UL>

<P><STRONG><a name="[e8]"></a>Get_Device_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, status_machin.o(i.Get_Device_Status))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERM_cmd_handle
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_position_data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_short_release
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button9_short_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button7_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button10_short_press
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battry_period_timer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_Task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[188]"></a>Get_sector</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, device_info.o(i.Get_sector))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[f1]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 322 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_update
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_ad_value
</UL>

<P><STRONG><a name="[f0]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_update
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_ad_value
</UL>

<P><STRONG><a name="[a1]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_update
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_ad_value
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_ADC_Start</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_update
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_ad_value
</UL>

<P><STRONG><a name="[fb]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SendReport
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Wifi_Response
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>

<P><STRONG><a name="[fc]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_bank1
</UL>

<P><STRONG><a name="[187]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_bank1
</UL>

<P><STRONG><a name="[100]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[186]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_bank1
</UL>

<P><STRONG><a name="[111]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[105]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ex_interupt_callback.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; EMR_pad_isr_callback &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_isr_callback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; EMR_pad_isr_callback &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_baterry
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battry_period_timer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_button
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_On_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Off_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_enter_power_down
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_wifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_wifi
</UL>

<P><STRONG><a name="[ee]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_position_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[106]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
</UL>

<P><STRONG><a name="[108]"></a>HAL_I2C_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
</UL>

<P><STRONG><a name="[e5]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[e3]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
</UL>

<P><STRONG><a name="[107]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[109]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>

<P><STRONG><a name="[191]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[112]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[f9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[f8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[113]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[122]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[124]"></a>HAL_PCD_EP_Flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>

<P><STRONG><a name="[127]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[129]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[12c]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[130]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1022 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_PCD_Init</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[135]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[13a]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[194]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[157]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[158]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 722 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[159]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[15a]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_SPI_Receive</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
</UL>

<P><STRONG><a name="[15d]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
</UL>

<P><STRONG><a name="[15c]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[195]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[116]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UART_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_wifi
</UL>

<P><STRONG><a name="[161]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[160]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[162]"></a>HAL_UART_MspInit</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[165]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_transmit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_pages
</UL>

<P><STRONG><a name="[27d]"></a>HAL_WIFI_data_recive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ewm3080b.o(i.HAL_WIFI_data_recive))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[167]"></a>HAL_WIFI_return_result</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ewm3080b.o(i.HAL_WIFI_return_result))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[2c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>IS_charge_full</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.IS_charge_full))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_baterry
</UL>

<P><STRONG><a name="[205]"></a>IS_emr_update_sucess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, general_emr.o(i.IS_emr_update_sucess))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[a]"></a>Ioctl_ble</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, nrf51822.o(i.Ioctl_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Ioctl_ble &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cpu_id
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Response
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Ioctl_wifi</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ewm3080b.o(i.Ioctl_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Ioctl_wifi &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[1fd]"></a>Is_battery_is_safe</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, battery.o(i.Is_battery_is_safe))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[284]"></a>Is_enable_note_store</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, note_manager.o(i.Is_enable_note_store))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
</UL>

<P><STRONG><a name="[16d]"></a>Load_device_info</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, device_info.o(i.Load_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Load_device_info &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
</UL>

<P><STRONG><a name="[16f]"></a>Low_Power_manager</STRONG> (Thumb, 162 bytes, Stack size 192 bytes, power_manager.o(i.Low_Power_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Low_Power_manager &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battry_period_timer
</UL>

<P><STRONG><a name="[176]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 144 bytes, Stack size 168 bytes, page_detect.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MX_USART2_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_moudule_init
</UL>

<P><STRONG><a name="[177]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 220 bytes, Stack size 200 bytes, ewm3080b.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MX_USART6_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_wifi
</UL>

<P><STRONG><a name="[178]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>OLED_CLEAR_BUFF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oled.o(i.OLED_CLEAR_BUFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_CLEAR_BUFF
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[17d]"></a>OLED_Display_Off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled.o(i.OLED_Display_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Display_Off &rArr; SPI_Write_Command &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_display_charge_full
</UL>

<P><STRONG><a name="[c4]"></a>OLED_Display_On</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled.o(i.OLED_Display_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Display_On &rArr; SPI_Write_Command &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_low_power
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_charging_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
</UL>

<P><STRONG><a name="[17e]"></a>OLED_DrawLine</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, oled.o(i.OLED_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
</UL>

<P><STRONG><a name="[17f]"></a>OLED_DrawPoint</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
</UL>

<P><STRONG><a name="[d6]"></a>OLED_DrawRectangle</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, oled.o(i.OLED_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_DrawRectangle &rArr; OLED_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_storage_space
</UL>

<P><STRONG><a name="[ce]"></a>OLED_Draw_BMP</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, oled.o(i.OLED_Draw_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_storage_space
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_onlinenote_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_offlinenote_page
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_addr
</UL>

<P><STRONG><a name="[d7]"></a>OLED_Fill</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, oled.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Fill
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_storage_space
</UL>

<P><STRONG><a name="[bf]"></a>OLED_Off_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oled.o(i.OLED_Off_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Off_Init &rArr; SPI_Write_Command &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispalay_deinit
</UL>

<P><STRONG><a name="[180]"></a>OLED_On_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(i.OLED_On_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_On_Init &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[d9]"></a>OLED_Refresh_bank</STRONG> (Thumb, 274 bytes, Stack size 280 bytes, oled.o(i.OLED_Refresh_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = OLED_Refresh_bank &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
</UL>

<P><STRONG><a name="[181]"></a>OLED_ShowChar</STRONG> (Thumb, 132 bytes, Stack size 52 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_ShowChar
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[cf]"></a>OLED_ShowString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_onlinenote_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_offlinenote_page
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_addr
</UL>

<P><STRONG><a name="[63]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Open_ble</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf51822.o(i.Open_ble))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Open_wifi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ewm3080b.o(i.Open_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Open_wifi &rArr; MX_USART6_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[183]"></a>Read_EMR</STRONG> (Thumb, 96 bytes, Stack size 176 bytes, general_emr.o(i.Read_EMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Read_EMR &rArr; TOUCH_PAD_ON &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
</UL>

<P><STRONG><a name="[b]"></a>Read_ble</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf51822.o(i.Read_ble))
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Read_wifi</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ewm3080b.o(i.Read_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_wifi
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_wifi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[18f]"></a>Reset_Low_Power_Timer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power_manager.o(i.Reset_Low_Power_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
</UL>

<P><STRONG><a name="[184]"></a>Revice_wifi</STRONG> (Thumb, 184 bytes, Stack size 176 bytes, ewm3080b.o(i.Revice_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Revice_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recive
</UL>

<P><STRONG><a name="[b1]"></a>SPI_Write_Command</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, oled.o(i.SPI_Write_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_Write_Command &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_bank
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Off_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test
</UL>

<P><STRONG><a name="[b2]"></a>SPI_Write_Data</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, oled.o(i.SPI_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_bank
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test
</UL>

<P><STRONG><a name="[281]"></a>STATION_DOWN_callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ewm3080b.o(i.STATION_DOWN_callback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[280]"></a>STATION_UP_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ewm3080b.o(i.STATION_UP_callback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[185]"></a>STMFLASH_Erase_bank1</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, dfu.o(i.STMFLASH_Erase_bank1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STMFLASH_Erase_bank1 &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[16e]"></a>STMFLASH_Read</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, device_info.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_device_info
</UL>

<P><STRONG><a name="[bd]"></a>STMFLASH_Write</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, device_info.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMFLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_sector
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dfu_Info_update
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[213]"></a>Send_wifi</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ewm3080b.o(i.Send_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_wifi
</UL>

<P><STRONG><a name="[e9]"></a>Set_Device_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, status_machin.o(i.Set_Device_Status))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERM_cmd_handle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_long_press
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>

<P><STRONG><a name="[189]"></a>Status_poll</STRONG> (Thumb, 234 bytes, Stack size 176 bytes, status_machin.o(i.Status_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = Status_poll &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Low_Power_Timer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_all
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_moudule_reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_value
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_enter_power_down
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_change
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_machin_thread
</UL>

<P><STRONG><a name="[33]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>SystemClock_Config</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>TCP_SERVER_CLOSED_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ewm3080b.o(i.TCP_SERVER_CLOSED_callback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[196]"></a>TCP_SERVER_CONNECTED_callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ewm3080b.o(i.TCP_SERVER_CONNECTED_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TCP_SERVER_CONNECTED_callback &rArr; Write_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[27e]"></a>TCP_SERVER_DISCONNECTED_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ewm3080b.o(i.TCP_SERVER_DISCONNECTED_callback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>

<P><STRONG><a name="[4a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>TOUCH_PAD_OFF</STRONG> (Thumb, 174 bytes, Stack size 168 bytes, general_emr.o(i.TOUCH_PAD_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TOUCH_PAD_OFF &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
</UL>

<P><STRONG><a name="[e2]"></a>TOUCH_PAD_ON</STRONG> (Thumb, 328 bytes, Stack size 192 bytes, general_emr.o(i.TOUCH_PAD_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TOUCH_PAD_ON &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[197]"></a>UART2_Callback</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, page_detect.o(i.UART2_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART2_Callback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>UART6_Callback</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wifi_uart.o(i.UART6_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = UART6_Callback &rArr; wifi_Response_callback &rArr; TCP_SERVER_CONNECTED_callback &rArr; Write_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART2_IRQHandler &rArr; UART2_Callback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = USART6_IRQHandler &rArr; UART6_Callback &rArr; wifi_Response_callback &rArr; TCP_SERVER_CONNECTED_callback &rArr; Write_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>USBD_CUSTOM_HID_RegisterInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1a1]"></a>USBD_CUSTOM_HID_SendReport</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SendReport
</UL>

<P><STRONG><a name="[1bb]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1a6]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1a7]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1a4]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[1a3]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
</UL>

<P><STRONG><a name="[1a9]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1a5]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[1aa]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1d]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1ab]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[179]"></a>USBD_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1af]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[19d]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[11d]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[119]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[11f]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1b0]"></a>USBD_LL_FlushEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_FlushEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_FlushEP &rArr; HAL_PCD_EP_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SendReport
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_LL_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1bd]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[142]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[143]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[19f]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[19c]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DataOut
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[14c]"></a>USBD_LL_Reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[14d]"></a>USBD_LL_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[14e]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[14b]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1b3]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[151]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1a8]"></a>USBD_LL_StallEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b8]"></a>USBD_LL_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1a2]"></a>USBD_LL_Transmit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_SendReport
</UL>

<P><STRONG><a name="[1b4]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[17a]"></a>USBD_RegisterClass</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_RegisterClass &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1b9]"></a>USBD_SendReport</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, usbd_custom_hid_if.o(i.USBD_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_SendReport &rArr; USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_SendReport
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
</UL>

<P><STRONG><a name="[1bc]"></a>USBD_SetClassConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[17c]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_StdDevReq</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_StdEPReq</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b6]"></a>USBD_StdItfReq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[128]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[13b]"></a>USB_ActivateSetup</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>USB_CoreInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[121]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[153]"></a>USB_DevConnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[14a]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[149]"></a>USB_DevInit</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[146]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[12b]"></a>USB_EP0StartXfer</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[12e]"></a>USB_EP0_OutStart</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[123]"></a>USB_EPClearStall</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[12d]"></a>USB_EPSetStall</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[12a]"></a>USB_EPStartXfer</STRONG> (Thumb, 534 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[154]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[126]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[125]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[13c]"></a>USB_GetDevSpeed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>USB_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>USB_SetCurrentMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[150]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[182]"></a>USB_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[1bf]"></a>Update_device_info</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, device_info.o(i.Update_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Update_device_info &rArr; STMFLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[2f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16b]"></a>Wait_Response</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf51822.o(i.Wait_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Wait_Response &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>

<P><STRONG><a name="[1c0]"></a>Wait_Wifi_Response</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wifi_api.o(i.Wait_Wifi_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wait_Wifi_Response &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_block
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_excute
</UL>

<P><STRONG><a name="[1c1]"></a>Write_EMR</STRONG> (Thumb, 112 bytes, Stack size 208 bytes, general_emr.o(i.Write_EMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Write_EMR &rArr; TOUCH_PAD_ON &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[c]"></a>Write_ble</STRONG> (Thumb, 290 bytes, Stack size 184 bytes, nrf51822.o(i.Write_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Write_ble &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Write_wifi</STRONG> (Thumb, 296 bytes, Stack size 176 bytes, ewm3080b.o(i.Write_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Write_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_host_report_error
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SERVER_CONNECTED_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29f]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[1ae]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1c4]"></a>__0sprintf$5</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a0]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[a7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_display_charge_full
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_test_nrf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_onlinenote_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_offlinenote_page
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_addr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_long_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[2a1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2a2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c5]"></a>aotu_update_icon_thread</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, display.o(i.aotu_update_icon_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aotu_update_icon_thread &rArr; DRAW_1_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[85]"></a>application_start</STRONG> (Thumb, 322 bytes, Stack size 240 bytes, application_main_thread.o(i.application_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = application_start &rArr; offline_write_flash_Thread &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_thread
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmi_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_log
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_On_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position_thread
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_deinit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>batt_meas_is_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, battery.o(i.batt_meas_is_shutdown))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
</UL>

<P><STRONG><a name="[22d]"></a>batt_meas_power_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, battery.o(i.batt_meas_power_check))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
</UL>

<P><STRONG><a name="[1d4]"></a>batt_meas_update</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, battery.o(i.batt_meas_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = batt_meas_update &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battry_period_timer
</UL>

<P><STRONG><a name="[8d]"></a>battery_check_thread</STRONG> (Thumb, 624 bytes, Stack size 160 bytes, battery.o(i.battery_check_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = battery_check_thread &rArr; init_charging_display &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_battery_value
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_low_power
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_not_enough
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_is_shutdown
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application_main_thread.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>battery_not_enough</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, battery.o(i.battery_not_enough))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
</UL>

<P><STRONG><a name="[94]"></a>battry_period_timer</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, battery.o(i.battry_period_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = battry_period_timer &rArr; Low_Power_manager &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_battery_value
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_percent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>big_to_small</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ext_rtc.o(i.big_to_small))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_BCD
</UL>

<P><STRONG><a name="[e]"></a>ble_clear_buff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf51822.o(i.ble_clear_buff))
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>ble_device_event</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf51822.o(i.ble_device_event))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
</UL>

<P><STRONG><a name="[f]"></a>ble_direct_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf51822.o(i.ble_direct_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_direct_write &rArr; send_msg_to_ble &rArr; Ioctl_ble &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>button10_short_press</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, input_event.o(i.button10_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button10_short_press
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[78]"></a>button1_short_press</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, input_event.o(i.button1_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button1_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[79]"></a>button2_short_press</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, input_event.o(i.button2_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button2_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[7a]"></a>button3_short_press</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, input_event.o(i.button3_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button3_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[7b]"></a>button4_short_press</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, input_event.o(i.button4_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button4_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[7c]"></a>button5_short_press</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, input_event.o(i.button5_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button5_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[7d]"></a>button6_short_press</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, input_event.o(i.button6_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button6_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[7e]"></a>button7_short_press</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, input_event.o(i.button7_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button7_short_press
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[7f]"></a>button8_short_press</STRONG> (Thumb, 160 bytes, Stack size 176 bytes, input_event.o(i.button8_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = button8_short_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[80]"></a>button9_short_press</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, input_event.o(i.button9_short_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button9_short_press
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[76]"></a>button_det_double_press</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, input_event.o(i.button_det_double_press))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[77]"></a>button_det_long_press</STRONG> (Thumb, 106 bytes, Stack size 168 bytes, input_event.o(i.button_det_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = button_det_long_press &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[75]"></a>button_det_short_release</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, input_event.o(i.button_det_short_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_det_short_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_key
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[1df]"></a>change_screen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display.o(i.change_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = change_screen &rArr; CLR_GDDRAM &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_main_screem_timer
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
</UL>

<P><STRONG><a name="[1e5]"></a>check_ble</STRONG> (Thumb, 80 bytes, Stack size 160 bytes, nrf51822.o(i.check_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = check_ble &rArr; Ioctl_ble &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
</UL>

<P><STRONG><a name="[1e6]"></a>check_position_data</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gather_position.o(i.check_position_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_position_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
</UL>

<P><STRONG><a name="[1e7]"></a>check_version</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, general_emr.o(i.check_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = check_version &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_jedi_info
</UL>

<P><STRONG><a name="[255]"></a>clear_dis_event</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, display.o(i.clear_dis_event))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[1e8]"></a>clear_jedi_info</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, general_emr.o(i.clear_jedi_info))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_update_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[18b]"></a>close_note</STRONG> (Thumb, 444 bytes, Stack size 200 bytes, note_manager.o(i.close_note))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_sector
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[1ee]"></a>create_next_note_head</STRONG> (Thumb, 466 bytes, Stack size 200 bytes, note_manager.o(i.create_next_note_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_sector
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_store_data
</UL>

<P><STRONG><a name="[1f0]"></a>create_usb_packet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_controler.o(i.create_usb_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = create_usb_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
</UL>

<P><STRONG><a name="[88]"></a>delay_charge_full</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, display.o(i.delay_charge_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = delay_charge_full &rArr; DRAW_2_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>flash_enter_power_down</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, norflash.o(i.flash_enter_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_enter_power_down &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
</UL>

<P><STRONG><a name="[1f2]"></a>flash_erase_sector</STRONG> (Thumb, 168 bytes, Stack size 176 bytes, norflash.o(i.flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = flash_erase_sector &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
</UL>

<P><STRONG><a name="[1c9]"></a>flash_hw_check</STRONG> (Thumb, 132 bytes, Stack size 184 bytes, norflash.o(i.flash_hw_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = flash_hw_check &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
</UL>

<P><STRONG><a name="[1f1]"></a>flash_rw</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, norflash.o(i.flash_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_enter_power_down
</UL>

<P><STRONG><a name="[1f4]"></a>flash_status_check</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, norflash.o(i.flash_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_status_check &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
</UL>

<P><STRONG><a name="[1f5]"></a>flash_wake_up</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, norflash.o(i.flash_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_wake_up &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
</UL>

<P><STRONG><a name="[1f3]"></a>flash_write_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, norflash.o(i.flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_write_enable &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
</UL>

<P><STRONG><a name="[72]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debug_log.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[19e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[1e0]"></a>get_battery_percent</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, battery.o(i.get_battery_percent))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battry_period_timer
</UL>

<P><STRONG><a name="[18a]"></a>get_battery_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.get_battery_value))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_change
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
</UL>

<P><STRONG><a name="[1f6]"></a>get_button_ad_value</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mmi.o(i.get_button_ad_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_button_ad_value &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_button
</UL>

<P><STRONG><a name="[1de]"></a>get_currunt_screen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.get_currunt_screen))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_short_release
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button9_short_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button7_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button10_short_press
</UL>

<P><STRONG><a name="[1e9]"></a>get_free_sector</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, note_manager.o(i.get_free_sector))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[1ed]"></a>get_next_sector</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, note_manager.o(i.get_next_sector))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[c9]"></a>get_server_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, server.o(i.get_server_mode))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position_thread
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_wait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aotu_update_icon_thread
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_isr_callback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_short_release
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button9_short_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button7_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button10_short_press
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interface_manager
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_Task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[1c6]"></a>get_server_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, server.o(i.get_server_status))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aotu_update_icon_thread
</UL>

<P><STRONG><a name="[1cc]"></a>half_product_test_check</STRONG> (Thumb, 212 bytes, Stack size 192 bytes, product_test.o(i.half_product_test_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = half_product_test_check &rArr; rtc_hw_check &rArr; read_rtc_data &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1f9]"></a>host_client</STRONG> (Thumb, 5314 bytes, Stack size 216 bytes, ble_client.o(i.host_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = host_client &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispalay_deinit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_jedi_info
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_i2c_int
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ble_data_buffer_to_host
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_data_to_sum
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_jedi_info
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_bank1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_battery_is_safe
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_emr_update_sucess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dfu_Info_update
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_msg
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
</UL>

<P><STRONG><a name="[c5]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_display_charge_full
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_long_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[1c8]"></a>init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, application_main_thread.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = init &rArr; TOUCH_PAD_OFF &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1da]"></a>init_charging_display</STRONG> (Thumb, 112 bytes, Stack size 168 bytes, battery.o(i.init_charging_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = init_charging_display &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
</UL>

<P><STRONG><a name="[1c7]"></a>init_log</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, debug_log.o(i.init_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = init_log &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1ef]"></a>init_offline_store_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, note_manager.o(i.init_offline_store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_offline_store_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_sector
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[209]"></a>init_position_buffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gather_position.o(i.init_position_buffer))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
</UL>

<P><STRONG><a name="[1cb]"></a>init_status_machin</STRONG> (Thumb, 592 bytes, Stack size 208 bytes, status_machin.o(i.init_status_machin))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = init_status_machin &rArr; power_off_battery_Display_init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_device_info
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_currunt_note_id
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1e4]"></a>input_init</STRONG> (Thumb, 146 bytes, Stack size 208 bytes, input_event.o(i.input_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = input_init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
</UL>

<P><STRONG><a name="[8f]"></a>input_thread</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, input_event.o(i.input_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = input_thread &rArr;  input_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcessLoop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_event.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>int_to_BCD</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ext_rtc.o(i.int_to_BCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = int_to_BCD
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
</UL>

<P><STRONG><a name="[8e]"></a>listen_ble_device_thread</STRONG> (Thumb, 352 bytes, Stack size 168 bytes, nrf51822.o(i.listen_ble_device_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = listen_ble_device_thread &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispalay_deinit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application_main_thread.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>log_thread</STRONG> (Thumb, 30 bytes, Stack size 104 bytes, debug_log.o(i.log_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = log_thread &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_log.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1a0]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Response_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
</UL>

<P><STRONG><a name="[d]"></a>manager_ble</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf51822.o(i.manager_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = manager_ble &rArr; server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ble_data_buffer_to_host
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>manager_wifi</STRONG> (Thumb, 32 bytes, Stack size 72 bytes, ewm3080b.o(i.manager_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = manager_wifi &rArr; wifi_status_loop &rArr; server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_loop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_wifi
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_wifi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[266]"></a>mcu_dfu_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_client.o(i.mcu_dfu_init))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>

<P><STRONG><a name="[1ca]"></a>mmi_init</STRONG> (Thumb, 540 bytes, Stack size 36 bytes, mmi.o(i.mmi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mmi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1dc]"></a>notify_low_power</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i.notify_low_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = notify_low_power &rArr; DRAW_2_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
</UL>

<P><STRONG><a name="[215]"></a>offline_store_data</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, note_manager.o(i.offline_store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_value
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_Pen_icon
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
</UL>

<P><STRONG><a name="[1d1]"></a>offline_write_flash_Thread</STRONG> (Thumb, 300 bytes, Stack size 192 bytes, note_manager.o(i.offline_write_flash_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = offline_write_flash_Thread &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position_thread
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[b5]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_machin_thread
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_On_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Off_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ble_data_buffer_to_host
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_thread
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
</UL>

<P><STRONG><a name="[210]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_log
</UL>

<P><STRONG><a name="[21b]"></a>osSemaphoreCreate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
</UL>

<P><STRONG><a name="[21d]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
</UL>

<P><STRONG><a name="[198]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Callback
</UL>

<P><STRONG><a name="[220]"></a>osSemaphoreWait</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[192]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cb]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_log
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_wifi
</UL>

<P><STRONG><a name="[b8]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_deinit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_wifi
</UL>

<P><STRONG><a name="[cc]"></a>osTimerCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osTimerCreate &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[228]"></a>osTimerDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cmsis_os.o(i.osTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osTimerDelete &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_deinit
</UL>

<P><STRONG><a name="[1d8]"></a>osTimerStart</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cmsis_os.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_wait
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_low_power
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
</UL>

<P><STRONG><a name="[20e]"></a>osTimerStop</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cmsis_os.o(i.osTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osTimerStop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
</UL>

<P><STRONG><a name="[1fe]"></a>ota_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_client.o(i.ota_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[200]"></a>ota_is_end</STRONG> (Thumb, 160 bytes, Stack size 176 bytes, ble_client.o(i.ota_is_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ota_is_end &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[22a]"></a>page_det_moudule_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, page_detect.o(i.page_det_moudule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = page_det_moudule_init &rArr; MX_USART2_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
</UL>

<P><STRONG><a name="[18d]"></a>page_det_moudule_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, page_detect.o(i.page_det_moudule_reset))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
</UL>

<P><STRONG><a name="[22b]"></a>page_det_start</STRONG> (Thumb, 330 bytes, Stack size 208 bytes, page_detect.o(i.page_det_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = page_det_start &rArr; page_det_moudule_init &rArr; MX_USART2_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_moudule_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
</UL>

<P><STRONG><a name="[22c]"></a>page_det_stop</STRONG> (Thumb, 142 bytes, Stack size 168 bytes, page_detect.o(i.page_det_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page_det_stop &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
</UL>

<P><STRONG><a name="[8a]"></a>power_off_battery_Display_Thread</STRONG> (Thumb, 398 bytes, Stack size 160 bytes, display.o(i.power_off_battery_Display_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = power_off_battery_Display_Thread &rArr; Display_chargefull &rArr; DRAW_2_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_charge_full
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_charging_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>power_off_battery_Display_deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, display.o(i.power_off_battery_Display_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = power_off_battery_Display_deinit &rArr; osTimerDelete &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
</UL>

<P><STRONG><a name="[20b]"></a>power_off_battery_Display_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, display.o(i.power_off_battery_Display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = power_off_battery_Display_init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
</UL>

<P><STRONG><a name="[1cd]"></a>power_on_battery_check</STRONG> (Thumb, 264 bytes, Stack size 184 bytes, battery.o(i.power_on_battery_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = power_on_battery_check &rArr; notify_low_power &rArr; DRAW_2_Area &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_battery_value
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_low_power
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_percent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_meas_power_check
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
</UL>

<P><STRONG><a name="[96]"></a>process_loop</STRONG> (Thumb, 158 bytes, Stack size 160 bytes, ewm3080b.o(i.process_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = process_loop &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tcp_client
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_station_up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>push_data_to_sum</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, misc.o(i.push_data_to_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = push_data_to_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[24a]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[28b]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[28f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[24d]"></a>qiut_test_ble_net</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf51822.o(i.qiut_test_ble_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = qiut_test_ble_net &rArr; Close_ble &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>

<P><STRONG><a name="[ad]"></a>read_button</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mmi.o(i.read_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_button &rArr; get_button_ad_value &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_ad_value
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcessLoop
</UL>

<P><STRONG><a name="[16a]"></a>read_cpu_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.read_cpu_id))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
</UL>

<P><STRONG><a name="[24e]"></a>read_note</STRONG> (Thumb, 198 bytes, Stack size 184 bytes, note_manager.o(i.read_note))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_note &rArr; flash_status_check &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
</UL>

<P><STRONG><a name="[95]"></a>read_page_thread</STRONG> (Thumb, 202 bytes, Stack size 160 bytes, page_detect.o(i.read_page_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = read_page_thread &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_online_page
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_pages
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_detect.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>read_page_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, page_detect.o(i.read_page_value))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_store_data
</UL>

<P><STRONG><a name="[e0]"></a>read_position</STRONG> (Thumb, 188 bytes, Stack size 176 bytes, gather_position.o(i.read_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Low_Power_Timer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERM_cmd_handle
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_position_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position_thread
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_isr_callback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[1d3]"></a>read_position_thread</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gather_position.o(i.read_position_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
</UL>

<P><STRONG><a name="[1eb]"></a>read_rtc_data</STRONG> (Thumb, 370 bytes, Stack size 208 bytes, ext_rtc.o(i.read_rtc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = read_rtc_data &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_to_int
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
</UL>

<P><STRONG><a name="[252]"></a>redraw_main_sceen</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, display.o(i.redraw_main_sceen))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = redraw_main_sceen &rArr; OLED_Refresh_bank &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_bank
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLEAR_BUFF
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_offlinenote_page
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main
</UL>

<P><STRONG><a name="[18e]"></a>report_status_change</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, status_machin.o(i.report_status_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_status_change
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_value
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
</UL>

<P><STRONG><a name="[24f]"></a>request_pages</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, page_detect.o(i.request_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = request_pages &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[93]"></a>resend_timer_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf51822.o(i.resend_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = resend_timer_callback &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>return_main_screem_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.return_main_screem_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = return_main_screem_timer &rArr; change_screen &rArr; CLR_GDDRAM &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>rtc_hw_check</STRONG> (Thumb, 92 bytes, Stack size 176 bytes, ext_rtc.o(i.rtc_hw_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rtc_hw_check &rArr; read_rtc_data &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
</UL>

<P><STRONG><a name="[a3]"></a>samll_to_big</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ext_rtc.o(i.samll_to_big))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_to_int
</UL>

<P><STRONG><a name="[dc]"></a>screen_low_power</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, display.o(i.screen_low_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = screen_low_power &rArr; osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
</UL>

<P><STRONG><a name="[da]"></a>screen_main</STRONG> (Thumb, 762 bytes, Stack size 80 bytes, display.o(i.screen_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = screen_main &rArr; redraw_main_sceen &rArr; OLED_Refresh_bank &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_sector
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_bank
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_BMP
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLEAR_BUFF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_1_Area
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dis_event
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aotu_update_icon_thread
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_storage_space
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_onlinenote_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_offlinenote_page
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_baterry
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update_addr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
</UL>

<P><STRONG><a name="[dd]"></a>screen_test_nrf</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, display.o(i.screen_test_nrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = screen_test_nrf &rArr; OLED_Refresh_bank &rArr; SPI_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_bank
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLEAR_BUFF
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
</UL>

<P><STRONG><a name="[db]"></a>screen_wait</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, display.o(i.screen_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = screen_wait &rArr; osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_2_Area
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_GDDRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsiplay_Thread
</UL>

<P><STRONG><a name="[1fb]"></a>search_note_head</STRONG> (Thumb, 270 bytes, Stack size 208 bytes, note_manager.o(i.search_note_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = search_note_head &rArr; read_note &rArr; flash_status_check &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[90]"></a>select_mode_thread</STRONG> (Thumb, 170 bytes, Stack size 160 bytes, input_event.o(i.select_mode_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = select_mode_thread &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_currunt_screen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_event.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>send_ble_data_buffer_to_host</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf51822.o(i.send_ble_data_buffer_to_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = send_ble_data_buffer_to_host &rArr; send_msg_to_ble &rArr; Ioctl_ble &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
</UL>

<P><STRONG><a name="[1fc]"></a>send_error_msg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_client.o(i.send_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[257]"></a>send_fw_packet_to_ble</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf51822.o(i.send_fw_packet_to_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = send_fw_packet_to_ble &rArr; osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Packet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>

<P><STRONG><a name="[1e1]"></a>send_msg_to_ble</STRONG> (Thumb, 524 bytes, Stack size 192 bytes, nrf51822.o(i.send_msg_to_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = send_msg_to_ble &rArr; Ioctl_ble &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ble_data_buffer_to_host
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_direct_write
</UL>

<P><STRONG><a name="[285]"></a>server_Send_position_to_host</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, server.o(i.server_Send_position_to_host))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
</UL>

<P><STRONG><a name="[1cf]"></a>server_init</STRONG> (Thumb, 1374 bytes, Stack size 192 bytes, server.o(i.server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = server_init &rArr; server_start &rArr; page_det_start &rArr; page_det_moudule_init &rArr; MX_USART2_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disbale_note_store
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
</UL>

<P><STRONG><a name="[ea]"></a>server_notify_host</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, server.o(i.server_notify_host))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERM_cmd_handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_change
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_short_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[262]"></a>server_send_direct</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, server.o(i.server_send_direct))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
</UL>

<P><STRONG><a name="[256]"></a>server_start</STRONG> (Thumb, 542 bytes, Stack size 184 bytes, server.o(i.server_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = server_start &rArr; page_det_start &rArr; page_det_moudule_init &rArr; MX_USART2_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disbale_note_store
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
</UL>

<P><STRONG><a name="[211]"></a>server_status_call_back</STRONG> (Thumb, 820 bytes, Stack size 192 bytes, server.o(i.server_status_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_position_buffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_en_upload
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_status
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_loop
</UL>

<P><STRONG><a name="[201]"></a>server_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, server.o(i.server_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
</UL>

<P><STRONG><a name="[1d2]"></a>server_thread</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, server.o(i.server_thread))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[20a]"></a>set_currunt_note_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, input_event.o(i.set_currunt_note_id))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
</UL>

<P><STRONG><a name="[25a]"></a>set_en_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, note_manager.o(i.set_en_upload))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
</UL>

<P><STRONG><a name="[204]"></a>set_i2c_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, general_emr.o(i.set_i2c_int))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[df]"></a>set_read_iic_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gather_position.o(i.set_read_iic_enable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_isr_callback
</UL>

<P><STRONG><a name="[e7]"></a>set_update_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, general_emr.o(i.set_update_flag))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERM_cmd_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_jedi_info
</UL>

<P><STRONG><a name="[22e]"></a>start_station_up</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ewm3080b.o(i.start_station_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = start_station_up &rArr; wifi_AT_commond_set &rArr; wifi_send_block &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
</UL>

<P><STRONG><a name="[22f]"></a>start_tcp_client</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ewm3080b.o(i.start_tcp_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = start_tcp_client &rArr; wifi_AT_commond_set &rArr; wifi_send_block &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
</UL>

<P><STRONG><a name="[25c]"></a>start_test_ble_net</STRONG> (Thumb, 166 bytes, Stack size 184 bytes, nrf51822.o(i.start_test_ble_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = start_test_ble_net &rArr; Ioctl_ble &rArr; ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>

<P><STRONG><a name="[8c]"></a>status_machin_thread</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, status_machin.o(i.status_machin_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = status_machin_thread &rArr; Status_poll &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application_main_thread.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>stop_display_charge_full</STRONG> (Thumb, 110 bytes, Stack size 168 bytes, display.o(i.stop_display_charge_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = stop_display_charge_full &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>stop_tcp_client</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ewm3080b.o(i.stop_tcp_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stop_tcp_client &rArr; wifi_AT_commond_set &rArr; wifi_send_block &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(i.TCP_SERVER_CONNECTED_callback)
</UL>
<P><STRONG><a name="[70]"></a>tcp_recive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ewm3080b.o(i.tcp_recive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_recive &rArr; Revice_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(i.TCP_SERVER_CONNECTED_callback)
</UL>
<P><STRONG><a name="[6f]"></a>tcp_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ewm3080b.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_send &rArr; wifi_data_transmit &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(i.TCP_SERVER_CONNECTED_callback)
</UL>
<P><STRONG><a name="[217]"></a>update_dis_Pen_icon</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.update_dis_Pen_icon))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_event
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_store_data
</UL>

<P><STRONG><a name="[190]"></a>update_dis_all</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.update_dis_all))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_event
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
</UL>

<P><STRONG><a name="[1d9]"></a>update_dis_battery_value</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(i.update_dis_battery_value))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battry_period_timer
</UL>

<P><STRONG><a name="[253]"></a>update_dis_event</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, display.o(i.update_dis_event))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_online_page
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_battery_value
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_all
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_Pen_icon
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_main_sceen
</UL>

<P><STRONG><a name="[250]"></a>update_dis_online_page</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(i.update_dis_online_page))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_event
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
</UL>

<P><STRONG><a name="[206]"></a>update_jedi_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, general_emr.o(i.update_jedi_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = update_jedi_info &rArr; check_version &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[1e2]"></a>update_oled_test_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.update_oled_test_key))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_short_release
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button9_short_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button7_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button10_short_press
</UL>

<P><STRONG><a name="[265]"></a>update_oled_test_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.update_oled_test_mode))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>

<P><STRONG><a name="[1d0]"></a>upload_stored_note_Thread</STRONG> (Thumb, 410 bytes, Stack size 216 bytes, note_manager.o(i.upload_stored_note_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = upload_stored_note_Thread &rArr; read_note &rArr; flash_status_check &rArr; flash_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_direct
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[263]"></a>usb_check_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_controler.o(i.usb_check_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = usb_check_status &rArr; server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_manager
</UL>

<P><STRONG><a name="[6]"></a>usb_clear_buff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_controler.o(i.usb_clear_buff))
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[264]"></a>usb_client</STRONG> (Thumb, 4968 bytes, Stack size 280 bytes, usb_client.o(i.usb_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = usb_client &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_oled_test_mode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispalay_deinit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qiut_test_ble_net
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_report_error
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dfu_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_jedi_info
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_i2c_int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_data_to_sum
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_jedi_info
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_bank1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_battery_is_safe
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_emr_update_sucess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dfu_Info_update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_handle
</UL>

<P><STRONG><a name="[1]"></a>usb_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_controler.o(i.usb_close))
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[268]"></a>usb_cmd_handle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_controler.o(i.usb_cmd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = usb_cmd_handle &rArr; usb_client &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_manager
</UL>

<P><STRONG><a name="[92]"></a>usb_controler_Task</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_controler.o(i.usb_controler_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = usb_controler_Task &rArr; usb_interface_manager &rArr; usb_server_open &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interface_manager
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.constdata)
</UL>
<P><STRONG><a name="[26a]"></a>usb_controler_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usb_controler.o(i.usb_controler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = usb_controler_init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
</UL>

<P><STRONG><a name="[267]"></a>usb_host_report_error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_client.o(i.usb_host_report_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = usb_host_report_error &rArr; usb_write &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
</UL>

<P><STRONG><a name="[269]"></a>usb_interface_manager</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_controler.o(i.usb_interface_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = usb_interface_manager &rArr; usb_server_open &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_Task
</UL>

<P><STRONG><a name="[2]"></a>usb_ioctl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_controler.o(i.usb_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>usb_main_task</STRONG> (Thumb, 160 bytes, Stack size 160 bytes, usb_controler.o(i.usb_main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = usb_main_task &rArr; usb_controler_init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application_main_thread.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>usb_manager</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_controler.o(i.usb_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = usb_manager &rArr; usb_check_status &rArr; server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>usb_open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_controler.o(i.usb_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>usb_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_controler.o(i.usb_read))
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[25b]"></a>usb_server_close</STRONG> (Thumb, 130 bytes, Stack size 168 bytes, server.o(i.usb_server_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interface_manager
</UL>

<P><STRONG><a name="[26b]"></a>usb_server_open</STRONG> (Thumb, 120 bytes, Stack size 168 bytes, server.o(i.usb_server_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = usb_server_open &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_screen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interface_manager
</UL>

<P><STRONG><a name="[4]"></a>usb_write</STRONG> (Thumb, 236 bytes, Stack size 184 bytes, usb_controler.o(i.usb_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = usb_write &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SendReport
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_usb_packet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_report_error
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_controler_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>usb_write_dirct</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, usb_controler.o(i.usb_write_dirct))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = usb_write_dirct &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SendReport
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_usb_packet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_controler.o(.data)
</UL>
<P><STRONG><a name="[23a]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[23f]"></a>vApplicationIdleHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application_main_thread.o(i.vApplicationIdleHook))
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[26c]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 108 bytes, Stack size 168 bytes, application_main_thread.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = vApplicationStackOverflowHook &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[234]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[28e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[231]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[271]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[233]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[236]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[23b]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[286]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[26d]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[235]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[21e]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[26f]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[244]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[218]"></a>vTaskDelay</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[226]"></a>vTaskDelete</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[249]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[273]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[270]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[274]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[28c]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[219]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[238]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[99]"></a>vTaskSwitchContext</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[277]"></a>wait_write_en_ready</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, note_manager.o(i.wait_write_en_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position_thread
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
</UL>

<P><STRONG><a name="[b6]"></a>wifi_AT_commond_excute</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_AT_commond_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wifi_AT_commond_excute &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_transmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Wifi_Response
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_wifi
</UL>

<P><STRONG><a name="[16c]"></a>wifi_AT_commond_set</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, wifi_api.o(i.wifi_AT_commond_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wifi_AT_commond_set &rArr; wifi_send_block &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_block
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_tcp_client
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tcp_client
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_station_up
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_wifi
</UL>

<P><STRONG><a name="[19a]"></a>wifi_Response_callback</STRONG> (Thumb, 382 bytes, Stack size 160 bytes, wifi_api.o(i.wifi_Response_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_Response_callback &rArr; TCP_SERVER_CONNECTED_callback &rArr; Write_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SERVER_DISCONNECTED_callback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SERVER_CONNECTED_callback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SERVER_CLOSED_callback
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATION_UP_callback
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATION_DOWN_callback
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WIFI_return_result
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WIFI_data_recive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Callback
</UL>

<P><STRONG><a name="[16]"></a>wifi_clear_buff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ewm3080b.o(i.wifi_clear_buff))
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[212]"></a>wifi_client</STRONG> (Thumb, 4358 bytes, Stack size 280 bytes, wifi_client.o(i.wifi_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = wifi_client &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Device_Status
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_device_info
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_offline_store_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispalay_deinit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_host_report_error
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dfu_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_jedi_info
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_i2c_int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_data_to_sum
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_jedi_info
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_bank1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_battery_is_safe
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_emr_update_sucess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dfu_Info_update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_wifi
</UL>

<P><STRONG><a name="[261]"></a>wifi_data_transmit</STRONG> (Thumb, 234 bytes, Stack size 224 bytes, wifi_api.o(i.wifi_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = wifi_data_transmit &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_transmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Wifi_Response
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>

<P><STRONG><a name="[17]"></a>wifi_direct_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ewm3080b.o(i.wifi_direct_write))
<BR>[Address Reference Count : 1]<UL><LI> ewm3080b.o(.data)
</UL>
<P><STRONG><a name="[283]"></a>wifi_host_report_error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifi_client.o(i.wifi_host_report_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wifi_host_report_error &rArr; Write_wifi &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
</UL>

<P><STRONG><a name="[27a]"></a>wifi_send_block</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wifi_api.o(i.wifi_send_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wifi_send_block &rArr; wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_transmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Wifi_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_set
</UL>

<P><STRONG><a name="[214]"></a>wifi_status_loop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ewm3080b.o(i.wifi_status_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = wifi_status_loop &rArr; server_status_call_back &rArr; usb_server_close &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_wifi
</UL>

<P><STRONG><a name="[279]"></a>wifi_transmit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi_uart.o(i.wifi_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wifi_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_block
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_AT_commond_excute
</UL>

<P><STRONG><a name="[1ea]"></a>write_note</STRONG> (Thumb, 466 bytes, Stack size 208 bytes, note_manager.o(i.write_note))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position_thread
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_sector
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
</UL>

<P><STRONG><a name="[1ec]"></a>write_note_header</STRONG> (Thumb, 206 bytes, Stack size 184 bytes, note_manager.o(i.write_note_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = write_note_header &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_rw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
</UL>

<P><STRONG><a name="[251]"></a>write_pos_buffer</STRONG> (Thumb, 348 bytes, Stack size 192 bytes, gather_position.o(i.write_pos_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_Send_position_to_host
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_store_data
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_enable_note_store
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dis_Pen_icon
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
</UL>

<P><STRONG><a name="[1fa]"></a>write_rtc_data</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ext_rtc.o(i.write_rtc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_rtc_data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[276]"></a>xPortStartScheduler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[223]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[21c]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[21a]"></a>xQueueCreateMutex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[208]"></a>xQueueGenericCreate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_log
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[20f]"></a>xQueueGenericReceive</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[28a]"></a>xQueueGenericReset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[a9]"></a>xQueueGenericSend</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;half_product_test_check
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hw_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMR_pad_version
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_version
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EMR
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_display_charge_full
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_hw_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EMR
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_long_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[c6]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_det_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_ON
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_server_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main_task
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_ble_device_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_status_machin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_check_thread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pos_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_position
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_note
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_write_en_ready
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_stored_note_Thread
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_note_head
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_note
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offline_write_flash_Thread
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_next_note_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_display_charge_full
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_Thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_waite_updata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_chargefull
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_manager
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_wifi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_client
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_ble_net
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_client
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_poll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_standby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_initialization_process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_det_long_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button8_short_press
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button6_short_press
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button5_short_press
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button4_short_press
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button3_short_press
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button2_short_press
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button1_short_press
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_dirct
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_transmit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_loop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revice_wifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_page_thread
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[21f]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[221]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[28d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[225]"></a>xTaskGenericCreate</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[222]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[245]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[289]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[23e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[248]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[239]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[227]"></a>xTimerCreate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>

<P><STRONG><a name="[275]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[229]"></a>xTimerGenericCommand</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[170]"></a>MX_ADC1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>MX_GPIO_Init</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>MX_I2C1_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>MX_I2C3_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>MX_SPI3_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, server.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
</UL>

<P><STRONG><a name="[25e]"></a>NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, status_machin.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_trying_poweroff
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine_power_off
</UL>

<P><STRONG><a name="[1e3]"></a>button_initialization_process</STRONG> (Thumb, 410 bytes, Stack size 184 bytes, status_machin.o(i.button_initialization_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = button_initialization_process &rArr; server_init &rArr; server_start &rArr; page_det_start &rArr; page_det_moudule_init &rArr; MX_USART2_UART_Init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_battery_check
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_battery_Display_deinit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_machin_thread
</UL>

<P><STRONG><a name="[25d]"></a>state_machine_power_off</STRONG> (Thumb, 154 bytes, Stack size 168 bytes, status_machin.o(i.state_machine_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = state_machine_power_off &rArr; init_charging_display &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_charging_display
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_machin_thread
</UL>

<P><STRONG><a name="[25f]"></a>state_machine_standby</STRONG> (Thumb, 122 bytes, Stack size 168 bytes, status_machin.o(i.state_machine_standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = state_machine_standby &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_machin_thread
</UL>

<P><STRONG><a name="[260]"></a>state_machine_trying_poweroff</STRONG> (Thumb, 172 bytes, Stack size 168 bytes, status_machin.o(i.state_machine_trying_poweroff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = state_machine_trying_poweroff &rArr; server_stop &rArr; close_note &rArr; write_note &rArr; wait_write_en_ready &rArr; read_position_thread &rArr; read_position &rArr; write_pos_buffer &rArr; offline_store_data &rArr; create_next_note_head &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wake_up
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_stop
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PAD_OFF
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_note
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispalay_deinit
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_machin_thread
</UL>

<P><STRONG><a name="[202]"></a>NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_client.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_client
</UL>

<P><STRONG><a name="[b9]"></a>Create_Packet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf51822.o(i.Create_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Create_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_direct_write
</UL>

<P><STRONG><a name="[a6]"></a>ble_rw</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf51822.o(i.ble_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_rw &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Response_callback
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw_packet_to_ble
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_to_ble
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_timer_callback
</UL>

<P><STRONG><a name="[ae]"></a>CheckButtonEvent</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mmi.o(i.CheckButtonEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckButtonEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcessLoop
</UL>

<P><STRONG><a name="[74]"></a>NULLFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mmi.o(i.NULLFunction))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(i.mmi_init)
</UL>
<P><STRONG><a name="[20]"></a>CUSTOM_HID_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>CUSTOM_HID_Init_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>CUSTOM_HID_OutEvent_FS</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CUSTOM_HID_OutEvent_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[1ac]"></a>USBD_GetDescriptor</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ba]"></a>USBD_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[26]"></a>USBD_CUSTOM_HID_DataIn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>USBD_CUSTOM_HID_DataOut</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CUSTOM_HID_DataOut &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_CUSTOM_HID_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CUSTOM_HID_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_CUSTOM_HID_EP0_RxReady</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CUSTOM_HID_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBD_CUSTOM_HID_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBD_CUSTOM_HID_GetDeviceQualifierDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_CUSTOM_HID_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CUSTOM_HID_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_CUSTOM_HID_Setup</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CUSTOM_HID_Setup &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[24b]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[24c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[23c]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[23d]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[247]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[230]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[237]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[83]"></a>prvIdleTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[272]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[232]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[240]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[241]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[243]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[242]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[246]"></a>prvSwitchTimerLists</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[84]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[224]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[169]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[10c]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[10e]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[110]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[10b]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[168]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[10d]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[10f]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[102]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[101]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[103]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[104]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[ef]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[163]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[166]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[138]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[fd]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[15f]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[15e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[117]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f6]"></a>ADC_Init</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1c3]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[73]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
