; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --split_sections --debug -c -S -onebula_master_401\em9203.s --depend=nebula_master_401\em9203.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I..\Device_Driver\flash -I..\Device_Driver\oled -I..\Device_Driver\RGB_LED -I..\APP -I..\Device_Driver\EMR -I..\Device_Driver\RTC -I..\Lib -I..\Device_Driver\BUTTON -I..\Device_Driver\NRF518XX -I..\Device_Driver\EM9203 -I..\Device_Driver\BATTERY -IE:\¹¤×÷Ä¿Â¼\nebula\code\nebula_master\nebula_master_401\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F401xE -DUSE_HAL_DRIVER -DSTM32F401xE --omf_browse=nebula_master_401\em9203.crf ..\Device_Driver\EM9203\em9203.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.EM92013_SPI_read||, CODE, READONLY, ALIGN=1

EM92013_SPI_read PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        ORR      r0,r4,#0x80
        STRB     r0,[sp,#4]
        MOVS     r2,#2
        MOV      r1,sp
        ADD      r0,sp,#4
        BL       spi_send_rcv_data
        LDRB     r0,[sp,#1]
        STRB     r0,[r5,#0]
        POP      {r2-r6,pc}
        ENDP


        AREA ||i.EM92013_SPI_read_fifo||, CODE, READONLY, ALIGN=1

EM92013_SPI_read_fifo PROC
        PUSH     {r4,r5,lr}
        SUB      sp,sp,#0x4c
        MOV      r5,r0
        MOV      r4,r1
        MOVS     r0,#0xe0
        STRB     r0,[sp,#0x28]
        ADDS     r2,r4,#1
        ADD      r1,sp,#4
        ADD      r0,sp,#0x28
        BL       spi_send_rcv_data
        MOV      r2,r4
        ADD      r1,sp,#5
        MOV      r0,r5
        BL       __aeabi_memcpy
        ADD      sp,sp,#0x4c
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.EM92013_SPI_write||, CODE, READONLY, ALIGN=1

EM92013_SPI_write PROC
        PUSH     {r3-r5,lr}
        MOV      r5,r0
        MOV      r4,r1
        AND      r0,r5,#0x7f
        STRB     r0,[sp,#0]
        STRB     r4,[sp,#1]
        MOVS     r1,#2
        MOV      r0,sp
        BL       spi_send_data
        POP      {r3-r5,pc}
        ENDP


        AREA ||i.EM92013_SPI_write_fifo||, CODE, READONLY, ALIGN=2

EM92013_SPI_write_fifo PROC
        PUSH     {r4,r5,lr}
        SUB      sp,sp,#0x24
        MOV      r5,r0
        MOV      r4,r1
        MOVS     r0,#0x40
        STRB     r0,[sp,#0]
        MOV      r2,r4
        MOV      r1,r5
        ADD      r0,sp,#1
        BL       __aeabi_memcpy
        SUBS     r0,r4,#1
        UXTB     r1,r0
        MOVS     r0,#0x14
        BL       EM92013_SPI_write
        ADDS     r1,r4,#1
        MOV      r0,sp
        BL       spi_send_data
        MOVS     r1,#0x80
        MOVS     r0,#0x16
        BL       EM92013_SPI_write
        MOVS     r2,#1
        LSLS     r1,r2,#8
        LDR      r0,|L3.96|
        BL       HAL_GPIO_WritePin
        MOV      r0,#0x12c
        BL       __asm___8_em9203_c_9a5c3fac__Asm_Delay_us
        MOVS     r2,#0
        MOV      r1,#0x100
        LDR      r0,|L3.96|
        BL       HAL_GPIO_WritePin
        MOVS     r1,#3
        MOVS     r0,#4
        BL       EM92013_SPI_write
        ADD      sp,sp,#0x24
        POP      {r4,r5,pc}
        ENDP

        DCW      0x0000
|L3.96|
        DCD      0x40020800

        AREA ||i.Em9203_Int_Callback||, CODE, READONLY, ALIGN=2

Em9203_Int_Callback PROC
        MOVS     r0,#1
        LDR      r1,|L4.8|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

|L4.8|
        DCD      send_module_int_flag

        AREA ||i.check_nebula_status||, CODE, READONLY, ALIGN=2

check_nebula_status PROC
        LDR      r0,|L5.8|
        LDRB     r0,[r0,#0]  ; g_nebula_status
        BX       lr
        ENDP

        DCW      0x0000
|L5.8|
        DCD      g_nebula_status

        AREA ||i.em9203_clearbuff||, CODE, READONLY, ALIGN=1

em9203_clearbuff PROC
        PUSH     {lr}
        BL       nebula_init_md_write_buffer
        POP      {pc}
        ENDP


        AREA ||i.em9203_close||, CODE, READONLY, ALIGN=2

em9203_close PROC
        PUSH     {r4,lr}
        MOVS     r2,#1
        LSLS     r1,r2,#12
        LDR      r0,|L7.16|
        BL       HAL_GPIO_WritePin
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L7.16|
        DCD      0x40020400

        AREA ||i.em9203_ioctl||, CODE, READONLY, ALIGN=1

em9203_ioctl PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        CBZ      r4,|L8.18|
        CMP      r4,#1
        BEQ      |L8.28|
        CMP      r4,#2
        BNE      |L8.32|
        B        |L8.30|
|L8.18|
        BL       nebula_init_node_device
        MOV      r5,r0
        MOV      r0,r5
|L8.26|
        POP      {r4-r6,pc}
|L8.28|
        B        |L8.34|
|L8.30|
        B        |L8.34|
|L8.32|
        NOP      
|L8.34|
        NOP      
        MOVS     r0,#0
        B        |L8.26|
        ENDP


        AREA ||i.em9203_manage||, CODE, READONLY, ALIGN=1

em9203_manage PROC
        PUSH     {r4,lr}
        BL       nebula_poll_handle
        POP      {r4,pc}
        ENDP


        AREA ||i.em9203_open||, CODE, READONLY, ALIGN=2

em9203_open PROC
        PUSH     {r4,lr}
        MOVS     r2,#1
        LSLS     r1,r2,#12
        LDR      r0,|L10.16|
        BL       HAL_GPIO_WritePin
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L10.16|
        DCD      0x40020400

        AREA ||i.em9203_read||, CODE, READONLY, ALIGN=1

em9203_read PROC
        MOV      r2,r0
        BX       lr
        ENDP


        AREA ||i.em9203_write||, CODE, READONLY, ALIGN=1

em9203_write PROC
        MOV      r3,r0
        BX       lr
        ENDP


        AREA ||i.em_wait_and_clear_int||, CODE, READONLY, ALIGN=2

em_wait_and_clear_int PROC
        PUSH     {r4,lr}
        NOP      
|L13.4|
        LDR      r0,|L13.28|
        LDRB     r0,[r0,#0]  ; send_module_int_flag
        CMP      r0,#0
        BEQ      |L13.4|
        MOVS     r0,#0
        LDR      r1,|L13.28|
        STRB     r0,[r1,#0]
        MOVS     r1,#0xff
        BL       EM92013_SPI_write
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L13.28|
        DCD      send_module_int_flag

        AREA ||i.init_em_module||, CODE, READONLY, ALIGN=2

init_em_module PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xff
        MOVS     r0,#1
        BL       EM92013_SPI_write
        MOVS     r1,#0xff
        MOVS     r0,#0
        BL       EM92013_SPI_write
        MOVS     r1,#0xb3
        MOVS     r0,#0x1a
        BL       EM92013_SPI_write
        MOVS     r1,#0x5e
        MOVS     r0,#0x1a
        BL       EM92013_SPI_write
        NOP      
|L14.36|
        LDR      r0,|L14.304|
        LDRB     r0,[r0,#0]  ; send_module_int_flag
        CMP      r0,#0
        BEQ      |L14.36|
        MOVS     r0,#0
        LDR      r1,|L14.304|
        STRB     r0,[r1,#0]
        MOVS     r1,#0xff
        MOVS     r0,#1
        BL       EM92013_SPI_write
        MOVS     r1,#0xff
        MOVS     r0,#0
        BL       EM92013_SPI_write
        MOVS     r1,#0
        MOVS     r0,#2
        BL       EM92013_SPI_write
        MOVS     r1,#1
        MOVS     r0,#3
        BL       EM92013_SPI_write
        MOVS     r1,#0x13
        MOVS     r0,#7
        BL       EM92013_SPI_write
        MOVS     r1,#0x3f
        MOVS     r0,#6
        BL       EM92013_SPI_write
        NOP      
|L14.100|
        LDR      r0,|L14.304|
        LDRB     r0,[r0,#0]  ; send_module_int_flag
        CMP      r0,#0
        BEQ      |L14.100|
        MOVS     r0,#0
        LDR      r1,|L14.304|
        STRB     r0,[r1,#0]
        MOVS     r1,#0xff
        MOVS     r0,#1
        BL       EM92013_SPI_write
        MOVS     r1,#0xff
        MOVS     r0,#0
        BL       EM92013_SPI_write
        MOVS     r1,#0
        MOVS     r0,#4
        BL       EM92013_SPI_write
        LDR      r0,|L14.308|
        LDRB     r1,[r0,#0]  ; rcv_ch
        MOVS     r0,#7
        BL       EM92013_SPI_write
        MOVS     r1,#0x1e
        MOVS     r0,#6
        BL       EM92013_SPI_write
        MOVS     r1,#0xad
        MOVS     r0,#8
        BL       EM92013_SPI_write
        MOVS     r0,#0xee
        LDR      r1,|L14.312|
        STRB     r0,[r1,#0]
        LDR      r0,|L14.316|
        LDRB     r1,[r0,#0]  ; customer_number
        MOVS     r0,#0xe
        BL       EM92013_SPI_write
        LDR      r0,|L14.320|
        LDRB     r0,[r0,#0]  ; class_number
        ORR      r1,r0,#0xc0
        MOVS     r0,#0xf
        BL       EM92013_SPI_write
        LDR      r0,|L14.312|
        LDRB     r1,[r0,#0]  ; group_number
        MOVS     r0,#0x10
        BL       EM92013_SPI_write
        LDR      r0,|L14.324|
        LDRB     r0,[r0,#0]  ; device_number
        MOVS     r1,#3
        SDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        LDR      r1,|L14.312|
        STRB     r0,[r1,#0]
        LDR      r0,|L14.316|
        LDRB     r1,[r0,#0]  ; customer_number
        MOVS     r0,#0x11
        BL       EM92013_SPI_write
        LDR      r0,|L14.320|
        LDRB     r0,[r0,#0]  ; class_number
        ORR      r1,r0,#0xc0
        MOVS     r0,#0x12
        BL       EM92013_SPI_write
        LDR      r0,|L14.312|
        LDRB     r1,[r0,#0]  ; group_number
        MOVS     r0,#0x13
        BL       EM92013_SPI_write
        MOVS     r1,#0xc0
        MOVS     r0,#2
        BL       EM92013_SPI_write
        MOVS     r1,#0
        MOVS     r0,#3
        BL       EM92013_SPI_write
        MOVS     r1,#0x1d
        MOVS     r0,#0xb
        BL       EM92013_SPI_write
        MOVS     r1,#0x70
        MOVS     r0,#0xc
        BL       EM92013_SPI_write
        MOVS     r1,#2
        MOVS     r0,#4
        BL       EM92013_SPI_write
        MOVS     r0,#0
        LDR      r1,|L14.304|
        STRB     r0,[r1,#0]
        POP      {r4,pc}
        ENDP

|L14.304|
        DCD      send_module_int_flag
|L14.308|
        DCD      rcv_ch
|L14.312|
        DCD      group_number
|L14.316|
        DCD      customer_number
|L14.320|
        DCD      class_number
|L14.324|
        DCD      device_number

        AREA ||i.nebula_fill_md_write_data_to_buf||, CODE, READONLY, ALIGN=2

nebula_fill_md_write_data_to_buf PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r5,#0
        MOVS     r6,#0
        LDR      r0,|L15.96|
        LDR      r0,[r0,#0]  ; md_write_buffer_input_index
        LDR      r1,|L15.100|
        LDR      r1,[r1,#0]  ; md_write_buffer_output_index
        SUBS     r5,r0,r1
        MOV      r0,#0x1770
        CMP      r5,r0
        BLS      |L15.48|
        LDR      r0,|L15.96|
        LDR      r0,[r0,#0]  ; md_write_buffer_input_index
        LDR      r1,|L15.100|
        STR      r0,[r1,#0]  ; md_write_buffer_output_index
        MOVS     r2,#1
        LSLS     r1,r2,#11
        LDR      r0,|L15.104|
        BL       HAL_GPIO_WritePin
        MOVS     r0,#1
|L15.46|
        POP      {r4-r6,pc}
|L15.48|
        LDR      r0,|L15.96|
        LDR      r0,[r0,#0]  ; md_write_buffer_input_index
        MOV      r1,#0x1770
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        UXTB     r6,r0
        ADD      r0,r6,r6,LSL #2
        LDR      r1,|L15.108|
        ADD      r0,r0,r1
        LDR      r1,[r4,#0]
        STR      r1,[r0,#0]
        LDRB     r1,[r4,#4]
        STRB     r1,[r0,#4]
        LDR      r0,|L15.96|
        LDR      r0,[r0,#0]  ; md_write_buffer_input_index
        ADDS     r0,r0,#1
        LDR      r1,|L15.96|
        STR      r0,[r1,#0]  ; md_write_buffer_input_index
        MOVS     r0,#0
        B        |L15.46|
        ENDP

|L15.96|
        DCD      md_write_buffer_input_index
|L15.100|
        DCD      md_write_buffer_output_index
|L15.104|
        DCD      0x40020800
|L15.108|
        DCD      md_write_buffer

        AREA ||i.nebula_init_md_write_buffer||, CODE, READONLY, ALIGN=2

nebula_init_md_write_buffer PROC
        MOVS     r0,#0
        LDR      r1,|L16.16|
        STR      r0,[r1,#0]  ; md_write_buffer_output_index
        LDR      r1,|L16.20|
        STR      r0,[r1,#0]  ; md_write_buffer_input_index
        LDR      r1,|L16.24|
        STR      r0,[r1,#0]  ; md_last_transfer_len
        BX       lr
        ENDP

|L16.16|
        DCD      md_write_buffer_output_index
|L16.20|
        DCD      md_write_buffer_input_index
|L16.24|
        DCD      md_last_transfer_len

        AREA ||i.nebula_init_node_device||, CODE, READONLY, ALIGN=2

nebula_init_node_device PROC
        PUSH     {r4,lr}
        LDR      r0,|L17.48|
        LDRB     r0,[r0,#0]  ; class_number
        MOVS     r1,#2
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L17.52|
        STRB     r0,[r1,#0]
        LDR      r0,|L17.48|
        LDRB     r0,[r0,#0]  ; class_number
        LSLS     r0,r0,#26
        LSRS     r0,r0,#24
        LDR      r1,|L17.56|
        STRB     r0,[r1,#0]
        BL       init_em_module
        BL       nebula_init_md_write_buffer
        MOVS     r0,#0
        LDR      r1,|L17.60|
        STRB     r0,[r1,#0]
        LDR      r1,|L17.64|
        STR      r0,[r1,#0]  ; g_nebula_status_tick_check
        POP      {r4,pc}
        ENDP

|L17.48|
        DCD      class_number
|L17.52|
        DCD      send_ch
|L17.56|
        DCD      rcv_ch
|L17.60|
        DCD      g_nebula_status
|L17.64|
        DCD      g_nebula_status_tick_check

        AREA ||i.nebula_inquiry_md_data_len||, CODE, READONLY, ALIGN=2

nebula_inquiry_md_data_len PROC
        MOVS     r1,#0
        LDR      r0,|L18.32|
        LDR      r0,[r0,#0]  ; md_write_buffer_input_index
        LDR      r2,|L18.36|
        LDR      r2,[r2,#0]  ; md_write_buffer_output_index
        CMP      r0,r2
        BLS      |L18.28|
        LDR      r0,|L18.32|
        LDR      r0,[r0,#0]  ; md_write_buffer_input_index
        LDR      r2,|L18.36|
        LDR      r2,[r2,#0]  ; md_write_buffer_output_index
        SUBS     r1,r0,r2
        MOV      r0,r1
|L18.26|
        BX       lr
|L18.28|
        MOVS     r0,#0
        B        |L18.26|
        ENDP

|L18.32|
        DCD      md_write_buffer_input_index
|L18.36|
        DCD      md_write_buffer_output_index

        AREA ||i.nebula_move_buffer_point||, CODE, READONLY, ALIGN=2

nebula_move_buffer_point PROC
        LDR      r0,|L19.28|
        LDR      r0,[r0,#0]  ; md_last_transfer_len
        CBZ      r0,|L19.26|
        LDR      r0,|L19.32|
        LDR      r0,[r0,#0]  ; md_write_buffer_output_index
        LDR      r1,|L19.28|
        LDR      r1,[r1,#0]  ; md_last_transfer_len
        ADD      r0,r0,r1
        LDR      r1,|L19.32|
        STR      r0,[r1,#0]  ; md_write_buffer_output_index
        MOVS     r0,#0
        LDR      r1,|L19.28|
        STR      r0,[r1,#0]  ; md_last_transfer_len
|L19.26|
        BX       lr
        ENDP

|L19.28|
        DCD      md_last_transfer_len
|L19.32|
        DCD      md_write_buffer_output_index

        AREA ||i.nebula_poll_handle||, CODE, READONLY, ALIGN=2

nebula_poll_handle PROC
        PUSH     {lr}
        SUB      sp,sp,#0x3c
        MOVS     r0,#0
        STR      r0,[sp,#0x38]
        STR      r0,[sp,#0x34]
        STR      r0,[sp,#0x30]
        LDR      r0,|L20.312|
        LDRB     r0,[r0,#0]  ; send_module_int_flag
        CBZ      r0,|L20.84|
        MOVS     r0,#0
        LDR      r1,|L20.312|
        STRB     r0,[r1,#0]
        ADD      r1,sp,#0x38
        BL       EM92013_SPI_read
        LDRB     r0,[sp,#0x38]
        AND      r0,r0,#0x80
        CBZ      r0,|L20.76|
        ADD      r1,sp,#0x34
        MOVS     r0,#0x15
        BL       EM92013_SPI_read
        LDRB     r0,[sp,#0x34]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0x34]
        LDRB     r1,[sp,#0x34]
        LDR      r0,|L20.316|
        BL       EM92013_SPI_read_fifo
        MOVS     r1,#0x10
        MOVS     r0,#0x16
        BL       EM92013_SPI_write
|L20.76|
        MOVS     r1,#0xff
        MOVS     r0,#0
        BL       EM92013_SPI_write
|L20.84|
        LDRB     r0,[sp,#0x34]
        CMP      r0,#0
        BEQ      |L20.306|
        MOVS     r0,#0
        STR      r0,[sp,#0x34]
        MOVS     r2,#0xe
        LDR      r1,|L20.316|
        ADD      r0,sp,#0x20
        BL       __aeabi_memcpy
        LDRB     r0,[sp,#0x20]
        LDR      r1,|L20.320|
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        LDR      r1,|L20.324|
        STR      r0,[r1,#0]  ; g_nebula_status_tick_check
        LDR      r0,|L20.320|
        LDRB     r0,[r0,#0]  ; g_nebula_status
        CMP      r0,#2
        BNE      |L20.306|
        LDRB     r0,[sp,#0x21]
        CMP      r0,#0xa1
        BNE      |L20.286|
        MOVS     r1,#0
        MOVS     r0,#4
        BL       EM92013_SPI_write
        LDR      r0,|L20.328|
        LDRB     r1,[r0,#0]  ; send_ch
        MOVS     r0,#7
        BL       EM92013_SPI_write
        LDR      r0,|L20.332|
        LDRB     r0,[r0,#0]  ; device_number
        STRB     r0,[sp,#0]
        LDRB     r0,[sp,#1]
        BIC      r0,r0,#7
        ADDS     r0,r0,#2
        STRB     r0,[sp,#1]
        MOVS     r1,#0x1e
        ADD      r0,sp,#2
        BL       nebula_read_md_data
        LDRB     r1,[sp,#1]
        BFI      r1,r0,#3,#5
        STRB     r1,[sp,#1]
        LDRB     r0,[sp,#1]
        MOVS     r2,#2
        ADD      r1,r2,r0,LSR #3
        MOV      r0,sp
        BL       EM92013_SPI_write_fifo
        BL       em_wait_and_clear_int
        ADD      r1,sp,#0x30
        MOVS     r0,#4
        BL       EM92013_SPI_read
        B        |L20.236|
|L20.228|
        ADD      r1,sp,#0x30
        MOVS     r0,#4
        BL       EM92013_SPI_read
|L20.236|
        LDRB     r0,[sp,#0x30]
        CMP      r0,#3
        BEQ      |L20.228|
        LDR      r0,|L20.336|
        LDRB     r1,[r0,#0]  ; rcv_ch
        MOVS     r0,#7
        BL       EM92013_SPI_write
        MOVS     r1,#2
        MOVS     r0,#4
        BL       EM92013_SPI_write
        LDRB     r0,[sp,#1]
        MOVS     r1,#0xa
        CMP      r1,r0,LSR #3
        BGE      |L20.306|
        MOV      r1,#0x800
        LDR      r0,|L20.340|
        BL       HAL_GPIO_TogglePin
        B        |L20.306|
|L20.286|
        LDR      r0,[sp,#0x22]
        CBZ      r0,|L20.306|
        LDR      r0,|L20.332|
        LDRB     r1,[r0,#0]  ; device_number
        MOVS     r0,#1
        LSLS     r0,r0,r1
        CBZ      r0,|L20.306|
        BL       nebula_move_buffer_point
|L20.306|
        ADD      sp,sp,#0x3c
        POP      {pc}
        ENDP

        DCW      0x0000
|L20.312|
        DCD      send_module_int_flag
|L20.316|
        DCD      test_buff
|L20.320|
        DCD      g_nebula_status
|L20.324|
        DCD      g_nebula_status_tick_check
|L20.328|
        DCD      send_ch
|L20.332|
        DCD      device_number
|L20.336|
        DCD      rcv_ch
|L20.340|
        DCD      0x40020800

        AREA ||i.nebula_read_md_data||, CODE, READONLY, ALIGN=2

nebula_read_md_data PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r5,r1
        MOVS     r6,#0
        BL       nebula_inquiry_md_data_len
        MOV      r4,r0
        CBZ      r4,|L21.106|
        LDR      r0,|L21.116|
        LDR      r0,[r0,#0]  ; md_write_buffer_output_index
        MOV      r1,#0x1770
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        UXTB     r6,r0
        ADD      r4,r4,r4,LSL #2
        CMP      r4,r5
        BCC      |L21.76|
        ADD      r0,r6,r6,LSL #2
        LDR      r2,|L21.120|
        ADDS     r1,r0,r2
        MOV      r2,r5
        MOV      r0,r7
        BL       __aeabi_memcpy
        MOVS     r0,#5
        UDIV     r0,r5,r0
        LDR      r1,|L21.124|
        STR      r0,[r1,#0]  ; md_last_transfer_len
        MOV      r0,r5
|L21.72|
        POP      {r4-r8,pc}
|L21.76|
        ADD      r0,r6,r6,LSL #2
        LDR      r2,|L21.120|
        ADDS     r1,r0,r2
        MOV      r2,r4
        MOV      r0,r7
        BL       __aeabi_memcpy
        MOVS     r0,#5
        UDIV     r0,r4,r0
        LDR      r1,|L21.124|
        STR      r0,[r1,#0]  ; md_last_transfer_len
        UXTB     r0,r4
        B        |L21.72|
|L21.106|
        MOVS     r0,#0
        LDR      r1,|L21.124|
        STR      r0,[r1,#0]  ; md_last_transfer_len
        NOP      
        B        |L21.72|
        ENDP

|L21.116|
        DCD      md_write_buffer_output_index
|L21.120|
        DCD      md_write_buffer
|L21.124|
        DCD      md_last_transfer_len

        AREA ||i.nebula_status_check||, CODE, READONLY, ALIGN=2

nebula_status_check PROC
        PUSH     {lr}
        LDR      r0,|L22.36|
        LDR      r0,[r0,#0]  ; g_nebula_status_tick_check
        ADDS     r0,r0,#1
        LDR      r1,|L22.36|
        STR      r0,[r1,#0]  ; g_nebula_status_tick_check
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; g_nebula_status_tick_check
        CMP      r0,#0x3e8
        BLS      |L22.32|
        MOVS     r0,#0
        LDR      r1,|L22.40|
        STRB     r0,[r1,#0]
        BL       nebula_init_md_write_buffer
|L22.32|
        POP      {pc}
        ENDP

        DCW      0x0000
|L22.36|
        DCD      g_nebula_status_tick_check
|L22.40|
        DCD      g_nebula_status

        AREA ||i.spi_send_data||, CODE, READONLY, ALIGN=2

spi_send_data PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOVS     r2,#0
        MOVS     r1,#0x80
        LDR      r0,|L23.100|
        BL       HAL_GPIO_WritePin
        MOVS     r4,#0
        B        |L23.82|
|L23.22|
        NOP      
|L23.24|
        LDR      r0,|L23.104|
        LDR      r0,[r0,#0]  ; em_module_interface
        LDR      r0,[r0,#0]
        LDR      r0,[r0,#8]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L23.24|
        LDRB     r0,[r5,r4]
        LDR      r1,|L23.104|
        LDR      r1,[r1,#0]  ; em_module_interface
        LDR      r1,[r1,#0]
        STR      r0,[r1,#0xc]
        NOP      
|L23.52|
        LDR      r0,|L23.104|
        LDR      r0,[r0,#0]  ; em_module_interface
        LDR      r0,[r0,#0]
        LDR      r0,[r0,#8]
        AND      r0,r0,#1
        CMP      r0,#0
        BEQ      |L23.52|
        LDR      r0,|L23.104|
        LDR      r0,[r0,#0]  ; em_module_interface
        LDR      r0,[r0,#0]
        LDR      r0,[r0,#0xc]
        UXTB     r7,r0
        ADDS     r0,r4,#1
        UXTB     r4,r0
|L23.82|
        CMP      r4,r6
        BLT      |L23.22|
        MOVS     r2,#1
        MOVS     r1,#0x80
        LDR      r0,|L23.100|
        BL       HAL_GPIO_WritePin
        POP      {r4-r8,pc}
        ENDP

|L23.100|
        DCD      0x40020800
|L23.104|
        DCD      em_module_interface

        AREA ||i.spi_send_rcv_data||, CODE, READONLY, ALIGN=2

spi_send_rcv_data PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOVS     r2,#0
        MOVS     r1,#0x80
        LDR      r0,|L24.104|
        BL       HAL_GPIO_WritePin
        MOVS     r4,#0
        B        |L24.84|
|L24.24|
        NOP      
|L24.26|
        LDR      r0,|L24.108|
        LDR      r0,[r0,#0]  ; em_module_interface
        LDR      r0,[r0,#0]
        LDR      r0,[r0,#8]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L24.26|
        LDRB     r0,[r5,r4]
        LDR      r1,|L24.108|
        LDR      r1,[r1,#0]  ; em_module_interface
        LDR      r1,[r1,#0]
        STR      r0,[r1,#0xc]
        NOP      
|L24.54|
        LDR      r0,|L24.108|
        LDR      r0,[r0,#0]  ; em_module_interface
        LDR      r0,[r0,#0]
        LDR      r0,[r0,#8]
        AND      r0,r0,#1
        CMP      r0,#0
        BEQ      |L24.54|
        LDR      r0,|L24.108|
        LDR      r0,[r0,#0]  ; em_module_interface
        LDR      r0,[r0,#0]
        LDR      r0,[r0,#0xc]
        STRB     r0,[r6,r4]
        ADDS     r0,r4,#1
        UXTB     r4,r0
|L24.84|
        CMP      r4,r7
        BLT      |L24.24|
        MOVS     r2,#1
        MOVS     r1,#0x80
        LDR      r0,|L24.104|
        BL       HAL_GPIO_WritePin
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L24.104|
        DCD      0x40020800
|L24.108|
        DCD      em_module_interface

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=0

test_buff
        %        1024
md_write_buffer
        %        30000

        AREA ||.data||, DATA, ALIGN=2

em_module_interface
        DCD      0x00000000
send_module_int_flag
        DCB      0x00
rcv_module_0_data_rcv_len
        DCB      0x00
customer_number
        DCB      0xcc
class_number
        DCB      0x00
group_number
        DCB      0x00
device_number
        DCB      0x01
send_ch
        DCB      0x00
rcv_ch
        DCB      0x00
g_nebula_status
        DCB      0x00,0x00,0x00,0x00
g_nebula_status_tick_check
        DCD      0x00000000
md_write_buffer_input_index
        DCD      0x00000000
md_write_buffer_output_index
        DCD      0x00000000
md_last_transfer_len
        DCD      0x00000000
em9203_ops
        DCB      0x00,0x00,0x00,0x00
        DCD      em9203_open
        DCD      em9203_close
        DCD      em9203_ioctl
        DCD      em9203_read
        DCD      em9203_write
        DCD      em9203_manage
        DCD      em9203_clearbuff
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Device_Driver\\EM9203\\em9203.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_em9203_c_9a5c3fac____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___8_em9203_c_9a5c3fac____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_em9203_c_9a5c3fac____REVSH|
#line 402
|__asm___8_em9203_c_9a5c3fac____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_em9203_c_9a5c3fac____RRX|
#line 587
|__asm___8_em9203_c_9a5c3fac____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_em9203_c_9a5c3fac__Asm_Delay_us|
#line 119 "..\\Device_Driver\\EM9203\\em9203.c"
|__asm___8_em9203_c_9a5c3fac__Asm_Delay_us| PROC
#line 120

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***

        EXPORT Em9203_Int_Callback [CODE]
        EXPORT check_nebula_status [CODE]
        EXPORT em9203_clearbuff [CODE]
        EXPORT em9203_close [CODE]
        EXPORT em9203_ioctl [CODE]
        EXPORT em9203_manage [CODE]
        EXPORT em9203_open [CODE]
        EXPORT em9203_read [CODE]
        EXPORT em9203_write [CODE]
        EXPORT nebula_fill_md_write_data_to_buf [CODE]
        EXPORT nebula_init_md_write_buffer [CODE]
        EXPORT nebula_init_node_device [CODE]
        EXPORT nebula_inquiry_md_data_len [CODE]
        EXPORT nebula_move_buffer_point [CODE]
        EXPORT nebula_poll_handle [CODE]
        EXPORT nebula_read_md_data [CODE]
        EXPORT nebula_status_check [CODE]
        EXPORT test_buff [DATA,SIZE=1024]
        EXPORT md_write_buffer [DATA,SIZE=30000]
        EXPORT em_module_interface [DATA,SIZE=4]
        EXPORT send_module_int_flag [DATA,SIZE=1]
        EXPORT rcv_module_0_data_rcv_len [DATA,SIZE=1]
        EXPORT customer_number [DATA,SIZE=1]
        EXPORT class_number [DATA,SIZE=1]
        EXPORT group_number [DATA,SIZE=1]
        EXPORT device_number [DATA,SIZE=1]
        EXPORT send_ch [DATA,SIZE=1]
        EXPORT rcv_ch [DATA,SIZE=1]
        EXPORT g_nebula_status [DATA,SIZE=1]
        EXPORT g_nebula_status_tick_check [DATA,SIZE=4]
        EXPORT md_write_buffer_input_index [DATA,SIZE=4]
        EXPORT md_write_buffer_output_index [DATA,SIZE=4]
        EXPORT md_last_transfer_len [DATA,SIZE=4]
        EXPORT em9203_ops [DATA,SIZE=36]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT HAL_GPIO_WritePin [CODE]
        IMPORT __aeabi_memcpy [CODE]
        IMPORT HAL_GPIO_TogglePin [CODE]

        KEEP EM92013_SPI_read
        KEEP EM92013_SPI_read_fifo
        KEEP EM92013_SPI_write
        KEEP EM92013_SPI_write_fifo
        KEEP em_wait_and_clear_int
        KEEP init_em_module
        KEEP spi_send_data
        KEEP spi_send_rcv_data

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
